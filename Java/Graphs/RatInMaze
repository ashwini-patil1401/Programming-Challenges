import java.util.LinkedList;
import java.util.Queue;

class Node {
    int x;
    int y;
    int level = 0;
    Node parent;

    Node( int x, int y, int d, Node n){
        this.x = x;
        this.y = y;
        level = d;
        parent = n;
    }
}

class Soln {
    final int N =5;
    Integer[][] map = {
            {1, 1, 0, 1, 1},
            {1, 0, 1, 0, 1},
            {0, 1, 0, 0, 1},
            {0, 0, 0, 1, 1},
            {0, 0, 0, 1, 1}};

    boolean isvalid(int x, int y) {
        if(x < 0 || x >= N || y < 0 || y >= N) {
            return false;
        }

        return true;
    }

    void add (Queue<Node> q, Node n){
        int x = n.x;
        int y = n.y;
        int l = n.level + 1;

        if(map[x][y] == 0){
            return;
        }

        if(isvalid(x-1, y-1))
            q.add(new Node(x-1, y-1, l, n));

        if(isvalid(x-1, y))
            q.add(new Node(x-1, y, l, n));

        if(isvalid(x-1, y+1))
            q.add(new Node(x-1, y+1, l, n));

        if(isvalid(x+1, y-1))
            q.add(new Node(x+1, y-1, l, n));

        if(isvalid(x+1, y))
            q.add(new Node(x+1, y, l, n));

        if(isvalid(x+1, y+1))
            q.add(new Node(x+1, y+1, l, n));

        if(isvalid(x, y+1))
            q.add(new Node(x, y+1, l, n));

        if(isvalid(x, y-1))
            q.add(new Node(x, y-1, l, n));

    }

    int bfs(int x, int y, int d1, int d2) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(x, y,1, null));
        int i = x;
        int j = y;


        while(!queue.isEmpty()) {
           Node n = queue.poll();

           i = n.x;
           j = n.y;

           if(i == d1 && j == d2){
               Node  k = n;
               while(k != null){
                   k = k.parent;
               }
               return n.level;
           }

           add(queue, n);

        }

        return 0;

    }


}

public class RatInMaze {

    public static void main(String args[]){
        Soln s = new Soln();
        int k = s.bfs(2,1,3,3);

        System.out.println("shortest path " + k);
    }
}

/*OUTPUT : shortest path 6 */
